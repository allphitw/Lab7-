#include "BinarySearchTree.h"
#include <iostream>
#include <algorithm> // For max
using namespace std;

// Node constructor
Node::Node(const string& data)
    : data(data), left(nullptr), right(nullptr), height(1) {} // Initialize height as 1

// BinarySearchTree constructor
BinarySearchTree::BinarySearchTree() : root(nullptr) {}

// BinarySearchTree destructor
BinarySearchTree::~BinarySearchTree() {
    EmptyTree();
}

// Insert a new node (AVL-balanced)
void BinarySearchTree::Insert(const string& data) {
    root = Insert(root, data);
}

// Remove a node (AVL-balanced)
string BinarySearchTree::Remove(const string& data) {
    return RemoveHelper(root, data);
}

// Helper: Insert a new node with AVL balancing
Node* BinarySearchTree::Insert(Node* node, const string& data) {
    // Normal BST insertion
    if (node == nullptr) {
        return new Node(data);
    }
    if (data < node->data) {
        node->left = Insert(node->left, data);
    }
    else if (data > node->data) {
        node->right = Insert(node->right, data);
    }
    else {
        return node; // Duplicate data not allowed
    }

    // Update the height of the current node
    node->height = 1 + max(GetHeight(node->left), GetHeight(node->right));

    // Get the balance factor and balance the node if necessary
    int balance = GetBalance(node);

    // Left Left Case (single right rotation)
    if (balance > 1 && data < node->left->data) {
        return RotateRight(node);
    }

    // Right Right Case (single left rotation)
    if (balance < -1 && data > node->right->data) {
        return RotateLeft(node);
    }

    // Left Right Case (left-right rotation)
    if (balance > 1 && data > node->left->data) {
        node->left = RotateLeft(node->left);
        return RotateRight(node);
    }

    // Right Left Case (right-left rotation)
    if (balance < -1 && data < node->right->data) {
        node->right = RotateRight(node->right);
        return RotateLeft(node);
    }

    return node; // Return the (unchanged) node pointer
}

// Helper: Remove a node with AVL balancing
string BinarySearchTree::RemoveHelper(Node*& node, const string& data) {
    if (node == nullptr) {
        return ""; // Not found
    }

    // Normal BST deletion
    if (data < node->data) {
        return RemoveHelper(node->left, data);
    }
    else if (data > node->data) {
        return RemoveHelper(node->right, data);
    }
    else {
        // Node with one or no children
        if (node->left == nullptr || node->right == nullptr) {
            Node* temp = node->left ? node->left : node->right;
            delete node;
            node = temp;
        }
        else {
            // Node with two children
            Node* successor = FindMin(node->right);
            node->data = successor->data;
            RemoveHelper(node->right, successor->data);
        }
    }

    // If the tree has only one node, return
    if (node == nullptr) {
        return "";
    }

    // Update height of current node
    node->height = 1 + max(GetHeight(node->left), GetHeight(node->right));

    // Get the balance factor and balance the node if necessary
    int balance = GetBalance(node);

    // Left Left Case
    if (balance > 1 && GetBalance(node->left) >= 0) {
        return RotateRight(node)->data;
    }

    // Left Right Case
    if (balance > 1 && GetBalance(node->left) < 0) {
        node->left = RotateLeft(node->left);
        return RotateRight(node)->data;
    }

    // Right Right Case
    if (balance < -1 && GetBalance(node->right) <= 0) {
        return RotateLeft(node)->data;
    }

    // Right Left Case
    if (balance < -1 && GetBalance(node->right) > 0) {
        node->right = RotateRight(node->right);
        return RotateLeft(node)->data;
    }

    return node->data;
}

// Helper: Rotate right (single rotation)
Node* BinarySearchTree::RotateRight(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;

    // Perform rotation
    x->right = y;
    y->left = T2;

    // Update heights
    y->height = 1 + max(GetHeight(y->left), GetHeight(y->right));
    x->height = 1 + max(GetHeight(x->left), GetHeight(x->right));

    // Return new root
    return x;
}

// Helper: Rotate left (single rotation)
Node* BinarySearchTree::RotateLeft(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;

    // Perform rotation
    y->left = x;
    x->right = T2;

    // Update heights
    x->height = 1 + max(GetHeight(x->left), GetHeight(x->right));
    y->height = 1 + max(GetHeight(y->left), GetHeight(y->right));

    // Return new root
    return y;
}

// Helper: Get the height of a node
int BinarySearchTree::GetHeight(Node* node) const {
    return node == nullptr ? 0 : node->height;
}

// Helper: Get the balance factor of a node
int BinarySearchTree::GetBalance(Node* node) const {
    return node == nullptr ? 0 : GetHeight(node->left) - GetHeight(node->right);
}

