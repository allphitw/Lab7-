#ifndef BINARYSEARCHTREE_H
#define BINARYSEARCHTREE_H

#include <iostream>
#include <string>

class Node {
public:
    std::string data;
    Node* left;
    Node* right;
    int height;

    Node(const std::string& data);
};

class BinarySearchTree {
public:
    BinarySearchTree();
    ~BinarySearchTree();

    void Insert(const std::string& data);
    void Remove(const std::string& data);
    std::string Find(const std::string& data) const;
    int Size() const;
    void PrintTree(const std::string& order) const;

private:
    Node* root;

    Node* Insert(Node* node, const std::string& data);
    Node* RemoveHelper(Node* node, const std::string& data);
    Node* FindMin(Node* node);
    int height(Node* node) const;
    int getBalance(Node* node) const;
    Node* rightRotate(Node* y);
    Node* leftRotate(Node* x);
    void PrintTreeHelper(Node* node, const std::string& order, int level) const;
    void EmptyTree();
    Node* EmptyTreeHelper(Node* node);
    int SizeHelper(Node* node) const;
};

#endif

